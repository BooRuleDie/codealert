
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def canIGetExecuted(): 
        
    while(True):

        sleep(1)
        conn = psycopg2.connect(database="codealert_db",
                        host="127.0.0.1",
                        user="codealert",
                        password="codealert",
                        port="5432")
        cursor = conn.cursor()
        cursor.execute("select * from queue;")
        results = cursor.fetchall()
        
        resultsList = []
        if results:
            for result in results:
                resultsList.append(result[0])
        
        if MD5HASH not in resultsList:
            cursor.execute(f"insert into queue values ('{MD5HASH}') ;")
            conn.commit()
        elif MD5HASH == resultsList[0]:
            cursor.close()
            conn.close()
            return True

def removeMeFromQueue():
    conn = psycopg2.connect(database="codealert_db",
                        host="127.0.0.1",
                        user="codealert",
                        password="codealert",
                        port="5432")
    cursor = conn.cursor()
    cursor.execute(f"delete from queue where hash='{MD5HASH}';")
    conn.commit()
    cursor.close()
    conn.close()


def sendMail(query, files):
    msg = EmailMessage()
    msg['Subject'] = 'New Dorks Have Been Detected !'
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = EMAIL_TO

    bullethtml = ""
    for file in files:
        bullethtml += f"<li><a href={file}>Click Me</li>\n" 

    html = f""""<!DOCTYPE html>
    <html>
        <body>
            <h2 style="color:rgb(19, 46, 72);">Dork: {query}</h2>
            <h2 style="color:rgb(19, 46, 72);">New Findings:</h2> 
                <ul>
                    {bullethtml}
                </ul> 
        </body>
    </html>"""

    msg.add_alternative(html, subtype='html')

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        smtp.send_message(msg)

def updateDB(newEntries):
    
    connection = sqlite3.connect(f"../Databases/{MD5HASH}.db")
    with connection as conn:
        cursor = conn.cursor()
        
        for entry in newEntries:    
            cursor.execute(f"insert into '{MD5HASH}' values('{entry}')")
            
        conn.commit()

def fetchItems(search, GITHUB_APIs,itemNumber):   
    
    allItems = set()
    pageNumber = ceil(itemNumber/100)
    GITHUB_API_index = 0

    while(len(allItems) != itemNumber):
        for page in range(1,pageNumber+1):
            JSON = []

            while(len(JSON) != 100 and not ((itemNumber % 100) == len(JSON) and page == pageNumber)):
                r = requests.get(url="https://api.github.com/search/code", params={"q" : search,"page" : page,"per_page":100},headers = {"Accept" : "application/vnd.github+json","Authorization" : f"Bearer {GITHUB_APIs[GITHUB_API_index]}"})
                
                # changing github API Key in each request
                if GITHUB_API_index == len(GITHUB_APIs) - 1:
                    GITHUB_API_index = 0
                else:
                    GITHUB_API_index += 1

                try:
                    JSON = json.loads(r.text)["items"]
                    for repo in JSON:
                        allItems.add(repo["html_url"])
                except:
                    now = time()
                    resetDate = int(r.headers["X-Ratelimit-Reset"])
                    
                    sleep((resetDate - now) + 4)

    return allItems

def main():

    if canIGetExecuted() == True:
        SETAPI = fetchItems(QUERY, GITHUB_APIs, TOTAL_COUNT)
        SETDB = set()

        connection = sqlite3.connect(f"../Databases/{MD5HASH}.db")
        with connection as conn:
            cursor = conn.cursor()
            
            results = cursor.execute(f"select * from '{MD5HASH}'")
            results = results.fetchall()
            
            for result in results:
                SETDB.add(result[0])

        newCodes = SETAPI.difference(SETDB)

        if newCodes:
            sendMail(QUERY, newCodes)
            updateDB(newCodes)
    
    removeMeFromQueue()    

if __name__ == "__main__":
    main()

